---

- name: Install mhnserver dependencies
  package: name={{item}} state=present
  with_items: "{{ mhnserver_pkg }}"

## FIXME! xenial: https://github.com/unbit/uwsgi/issues/1262
- name: Ubuntu 16.04+ | fix bug uwsgi
  replace: dest={{ MHN_HOME }}/server/requirements.txt regexp='^uWSGI.*' replace='uWSGI'
  when: ansible_distribution == 'Ubuntu' and (ansible_distribution_release == 'xenial' or ansible_distribution_release == 'bionic')

# https://stackoverflow.com/questions/49627807/cryptacular-is-broken
# default is bcrypt 2.0.0 vs last 3.1.4/oct 2017
- name: Ubuntu 18.04 | update pip requirements.txt for bcrypt
  replace:
    dest: "{{ MHN_HOME }}/server/requirements.txt"
    regexp: '^bcrypt==.*'
    replace: 'bcrypt'
    backup: yes
  when: ansible_distribution == 'Ubuntu' and ansible_distribution_release == 'bionic'

- name: update pip requirements.txt for redis
  replace:
    dest: "{{ MHN_HOME }}/server/requirements.txt"
    regexp: '^redis==.*'
    replace: 'redis==3.2.1'

#- name: Install mhnserver virtualenv pycparser BUG https://github.com/pyca/cryptography/issues/3187
#  pip: name=pycparser version=2.14
#    virtualenv={{ MHN_HOME }}/env

- name: Install mhnserver virtualenv
  pip: requirements={{ MHN_HOME }}/server/requirements.txt
    virtualenv={{ MHN_HOME }}/env       # path taken from existing scripts, if changed need to change other places

- name: RedHat | Install mhnserver virtualenv pysqlite
  pip: name=pysqlite version=2.8.1
    virtualenv={{ MHN_HOME }}/env
  when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: Install python config
  pip:
    name: config
    state: present
    virtualenv: "{{ MHN_HOME }}/env"

- name: check if db was initialized
  stat: path={{ MHN_HOME }}/.configdb_initialized
  register: init_done
- name: check if mhn configuration file exists
  stat: path={{ MHN_HOME }}/server/config.py
  register: config_done
- name: Initialize configuration. Please be patient. This can take several minutes
## will do nothing if config.py exists
  command: "{{ MHN_HOME }}/env/bin/python generateconfig.py unattended -e {{ MHN_EMAIL }} -p {{ MHN_PASS }} -b {{ server_url }} -y {{ honeymap_url }} -l {{ MHN_HOME }}/server/mhn.log"
  args:
    chdir: "{{ MHN_HOME }}/server"
  when: not config_done.stat.exists or not init_done.stat.exists
- name: Initialize database. Please be patient. This can take several minutes
## out an error if database already initialized
  command: "{{ MHN_HOME }}/env/bin/python initdatabase.py"
  args:
    chdir: "{{ MHN_HOME }}/server"
  when: not config_done.stat.exists or not init_done.stat.exists
  register: initdb
  async: 900
  poll: 0
- name: check db initialization status
  async_status:
    jid: "{{ initdb.ansible_job_id }}"
  register: job_result
  until: job_result.finished
  retries: 30
  delay: 30
- name: add marker for db as initialized
  file: path={{ MHN_HOME }}/.configdb_initialized state=touch
  when: not config_done.stat.exists or not init_done.stat.exists


- name: ensure www directory exists
  file: path=/opt/www state=directory mode=755
- name: MHN server | ensure pid directory for mhn user
  file: path=/var/run/mhn state=directory mode=755 owner={{ mhn_user }}
- name: MHN server | ensure pid directory for mhn user at reboot (systemd-tmpfiles)
  lineinfile: dest=/etc/tmpfiles.d/mhn.conf line='    d    /run/mhn   0755 _mhn _mhn - -' create=yes
  when: ansible_service_mgr == 'systemd'

- block:
    - block:
        - name: MHN nginx configuration - http
          template: src=default dest={{ nginx_sitedir }}/default-mhn mode=0644
          notify:
            - nginx restart
        - name: MHN | Debian - enable http configuration
          file: src={{ nginx_sitedir }}/default-mhn dest=/etc/nginx/sites-enabled/default-mhn state=link
          notify:
            - nginx restart
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - block:
        - name: MHN nginx configuration - http
          template: src=default dest={{ nginx_sitedir }}/mhn.conf mode=0644
          notify:
            - nginx restart
      when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  when: mhn_httpport is defined

- block:
    - name: check if certificate exists
      stat: path={{ ssl_cert }}/{{ ansible_fqdn }}.crt
      register: localsslcert

    - name: Generale SSL certificate
      command: openssl req -x509 -nodes -sha256 -days 1095 -newkey rsa:2048 -subj "{{ certinfo }}/CN={{ certificate_cn }}" -keyout {{ ssl_private }}/{{ ansible_fqdn }}.key -out {{ ssl_cert }}/{{ ansible_fqdn }}.crt
      when: not localsslcert.stat.exists
    - name: ensure key file permissions are correct
      file: path={{ ssl_private }}/{{ ansible_fqdn }}.key owner=root group={{ ssl_group }} mode=0440
    - name: remove nginx default configuration
      file: path=/etc/nginx/sites-enabled/default-mhn state=absent
      when: mhn_httpport is not defined
      notify:
        - nginx restart
    - block:
        - name: MHN nginx configuration - https
          template: src=default-ssl dest={{ nginx_sitedir }}/default-ssl-mhn mode=0644
          notify:
            - nginx restart
        - name: enable default-ssl nginx configuration
          file: src={{ nginx_sitedir }}/default-ssl-mhn dest=/etc/nginx/sites-enabled/default-ssl-mhn state=link
          notify:
            - nginx restart
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
    - block:
        - name: MHN nginx configuration - https
          template: src=default-ssl dest={{ nginx_sitedir }}/mhn-ssl.conf mode=0644
          notify:
            - nginx restart
      when: ansible_os_family == "RedHat" or ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  when: mhn_httpsport is defined

- name: set mhnserver supervisor config
  template: "src={{ item }}.conf dest={{ supervisor_confdir }}/{{ item }}.{{ supervisor_ext }} mode=0644"
  with_items:
    - mhn-uwsgi
    - mhn-celery-worker
    - mhn-celery-beat
  notify:
    - supervisor update

- stat: path={{ MHN_HOME }}/.addusercollector
  register: addusercollector
- set_fact:
    MHN_UUID: "{{ 100 | random }}"
  when: not addusercollector.stat.exists
- name: generate random secret
  shell: "openssl rand -base64 48 | sed 's@[=\\/\\+]@@g;'"
  changed_when: false
  register: rand
- set_fact:
    SECRET: "{{ rand.stdout }}"
  when: not addusercollector.stat.exists
- command: '/opt/hpfeeds/env/bin/python /opt/hpfeeds/broker/add_user.py "collector" "{{ SECRET }}" "" "geoloc.events"'
  when: not addusercollector.stat.exists
- name: configure mhn collector
  template: src=collector.json dest={{ MHN_HOME }}/server/collector.json mode=0644
  when: not addusercollector.stat.exists
- file: path={{ MHN_HOME }}/.addusercollector state=touch
  when: not addusercollector.stat.exists

- name: add cleaning script
  template: src=mhn-clean-aging-data.sh.j2 dest={{ scriptsdir }}/mhn-clean-aging-data.sh mode=0755

- name: set mhn-collector supervisor config
  template: "src={{ item }}.conf dest={{ supervisor_confdir }}/{{ item }}.{{ supervisor_ext }} mode=0644"
  with_items:
    - mhn-collector
  notify:
    - supervisor update

- name: Make directory owned by www user
  file:
    path: "{{ MHN_HOME }}/server"
## FIXME! is it necessary? not idempotent with changes below
#    owner: "{{ www_user }}"
    group: "{{ www_user }}"
    recurse: yes

- stat: path={{ MHN_HOME }}/server/mhn.log
  register: mhnlog
## log file and root dir must be accessible to www and mhn users(mhn-celery-beat)
- name: ensure good permissions for {{ MHN_HOME }}/server/mhn.log
  file: "path={{ MHN_HOME }}/server/mhn.log state=touch mode=0664 owner={{ mhn_user }} group={{ www_user }}"
  when: not mhnlog.stat.exists
- name: ensure good permissions for {{ MHN_HOME }}/server/mhn.log
  file: "path={{ MHN_HOME }}/server/mhn.log mode=0664 owner={{ mhn_user }} group={{ www_user }}"
  when: mhnlog.stat.exists
- file: src={{ MHN_HOME }}/server/mhn.log dest=/var/log/mhn/mhn.log state=link force=yes
- name: ensure good permissions for {{ MHN_HOME }}/server/mhn.db
  file: "path={{ MHN_HOME }}/server/mhn.db mode=0755 owner={{ mhn_user }} group={{ www_user }}"
- name: ensure good permissions for {{ MHN_HOME }}/server/mhn/static/mhn.rules
  file: "path={{ MHN_HOME }}/server/mhn/static/mhn.rules mode=0644 owner={{ mhn_user }} group={{ www_user }}"

- name: MHN Server | ensure services are enabled and started
  service: name={{ item }} enabled=yes state=started
  with_items: "{{Â mhnserver_services }}"


